SRRI_ext_test("./kid-eb-274-t2834-at_de-de_en_6.pdf", "#A6A6A6")}
nn
source("C:/Users/blasc/OneDrive/Documents/GitHub/KID/Code/Functions/SRRI_ext_test.R")
{setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs/Erste")
SRRI_ext_test("./kid-eb-274-t2834-at_de-de_en_6.pdf", "#A6A6A6")}
debugonce(SRRI_ext_test)
{setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs/Erste")
SRRI_ext_test("./kid-eb-274-t2834-at_de-de_en_6.pdf", "#A6A6A6")}
View(dat.grps)
View(dat.grps)
rect.grp
unname(rect.grp)
# median
med.rect.grp <- median(dat.grps[, 1][which(dat.grps[, 3] == names(rect.grp))])
# return minimum absolute difference
dif <- abs(med.rect.grp - scale)
# which
SRRI <- which.min(dif)
SRRI
source("C:/Users/blasc/OneDrive/Documents/GitHub/KID/Code/Functions/SRRI_ext_test.R")
# test Erste
Map(function(x, y){
# set
{setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs")
setwd(x)
# ,pdfs
file_nom <- list.files(pattern = ".pdf")}
# FUN over all .pdfs
lapply(file_nom, function(z){
SRRI_ext_test(doc = z, col = y)
})
}, dirs[3], col[3, 2]) -> erste.test
# extracted SRRI
cbind(dat.valid.SRRI[dat.valid.SRRI[, "KAG"] == "Erste", ],
"Extracted" = sapply(erste.test[[1]], "[[", 2)) -> res
erste.test
View(erste.test)
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
# cache = TRUE ,
fig.width = 4,
fig.height = 3,
fig.align = "center")
# Packages
get.package <- function(package){
lapply(package, \(x){
# check if packages are installed and if not install them
if(!require(x, character.only = T)){
install.packages(x)
}
# call package
library(x, character.only = T)
})
}
# exec
get.package(c("png", "jpeg", "tabulizer", "pdftools", "raster", "rgdal", "sp",
"cluster"))
# since I will use Map() / lapply() alot for plotting I will wrap them in invisible()
invis.Map <- function(f, ...) invisible(Map(f, ...))
invis.lapply <- function(x, f, ...) invisible(lapply(x, f, ...))
# set
setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs")
# files
file_names <- list.files(pattern = ".pdf", recursive = T)
# create df
dat.valid.SRRI <- as.data.frame(cbind("KID" = file_names,
"SRRI" = sapply(strsplit(sapply(strsplit(file_names, "_", fixed = T),
function(x) x[length(x)]), ".", fixed = T), "[", 1)))
# split first col
dat.valid.SRRI[, "KAG"] <- sapply(strsplit(dat.valid.SRRI[, 1], "/"), "[", 1)
dat.valid.SRRI[, "KID"] <- sapply(strsplit(dat.valid.SRRI[, 1], "/"), "[", 2)
# order
dat.valid.SRRI <- dat.valid.SRRI[, c(3, 1, 2)]
# glimpse
head(dat.valid.SRRI, 7)
# dim
dim(dat.valid.SRRI)
# Hist
hist(as.numeric(dat.valid.SRRI[, "SRRI"]), breaks = 10, main = "SRRI", col = 4, xlab = "")
# set
setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs/Auxiliary")
# import
dat.col.KAG <- read.table(list.files(pattern = "RGB"),
col.names = c("KAG", "R", "G", "B"))
# add hex
sapply(as.data.frame(t(dat.col.KAG[, -1])),
function(x) do.call(rgb, as.list(c(x, maxColorValue = 255)))) -> HEX
# bind
dat.col.KAG <- cbind(dat.col.KAG, "HEX" = HEX)
# display
dat.col.KAG
# source functions
source("C:/Users/blasc/OneDrive/Documents/GitHub/KID/Code/Functions/SRRI_ext.R")
source("C:/Users/blasc/OneDrive/Documents/GitHub/KID/Code/Functions/SRRI_ext_test.R")
# set wd to file that contains
setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs")
# safe dirs
dirs <- list.dirs()[-c(1, 4)] # remove hardcode later
# colors
col <- dat.col.KAG[order(dat.col.KAG[, "KAG"]), c("KAG", "HEX")]
col[5, 1] <- "Kepler Fonds"
# test Erste
Map(function(x, y){
# set
{setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs")
setwd(x)
# ,pdfs
file_nom <- list.files(pattern = ".pdf")}
# FUN over all .pdfs
lapply(file_nom, function(z){
SRRI_ext_test(doc = z, col = y)
})
}, dirs[3], col[3, 2]) -> erste.test
# extracted SRRI
cbind(dat.valid.SRRI[dat.valid.SRRI[, "KAG"] == "Erste", ],
"Extracted" = sapply(erste.test[[1]], "[[", 2)) -> res
dat.valid.SRRI[dat.valid.SRRI[, "KAG"] == "Erste", ]
sapply(erste.test[[1]], "[[", 2)
erste.test[[1]]
View(erste.test)
# extracted SRRI
cbind(dat.valid.SRRI[dat.valid.SRRI[, "KAG"] == "Erste", ],
"Extracted" = sapply(erste.test[[1]], "[[", 5)) -> res
par(mfrow = c(3, 4))
# plot
invis.Map(function(x, y, z, l, k){
{plot(x[, 1], x[, 2], col = x[, ncol(x)], pch = 19, main = paste("Predicted:", z, "| Actual:", l))
abline(v = y, col = "red", lwd = 2)
lapply(k, function(x) abline(v = x, col = "grey", lwd = 2, lty = 2))}
}, lapply(erste.test[[1]], "[[", 3), sapply(erste.test[[1]], "[[", 4), res[, 4], res[, 3],
lapply(erste.test[[1]], "[[", 5))
source("C:/Users/blasc/OneDrive/Documents/GitHub/KID/Code/Functions/SRRI_ext_test.R")
cbind(dat.valid.SRRI[dat.valid.SRRI[, "KAG"] == "Erste", ],
"Extracted" = sapply(erste.test[[1]], "[[", 2)) -> res
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
# cache = TRUE ,
fig.width = 4,
fig.height = 3,
fig.align = "center")
# Packages
get.package <- function(package){
lapply(package, \(x){
# check if packages are installed and if not install them
if(!require(x, character.only = T)){
install.packages(x)
}
# call package
library(x, character.only = T)
})
}
# exec
get.package(c("png", "jpeg", "tabulizer", "pdftools", "raster", "rgdal", "sp",
"cluster"))
# since I will use Map() / lapply() alot for plotting I will wrap them in invisible()
invis.Map <- function(f, ...) invisible(Map(f, ...))
invis.lapply <- function(x, f, ...) invisible(lapply(x, f, ...))
# set
setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs")
# files
file_names <- list.files(pattern = ".pdf", recursive = T)
# create df
dat.valid.SRRI <- as.data.frame(cbind("KID" = file_names,
"SRRI" = sapply(strsplit(sapply(strsplit(file_names, "_", fixed = T),
function(x) x[length(x)]), ".", fixed = T), "[", 1)))
# split first col
dat.valid.SRRI[, "KAG"] <- sapply(strsplit(dat.valid.SRRI[, 1], "/"), "[", 1)
dat.valid.SRRI[, "KID"] <- sapply(strsplit(dat.valid.SRRI[, 1], "/"), "[", 2)
# order
dat.valid.SRRI <- dat.valid.SRRI[, c(3, 1, 2)]
# glimpse
head(dat.valid.SRRI, 7)
# dim
dim(dat.valid.SRRI)
# Hist
hist(as.numeric(dat.valid.SRRI[, "SRRI"]), breaks = 10, main = "SRRI", col = 4, xlab = "")
# set
setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs/Auxiliary")
# import
dat.col.KAG <- read.table(list.files(pattern = "RGB"),
col.names = c("KAG", "R", "G", "B"))
# add hex
sapply(as.data.frame(t(dat.col.KAG[, -1])),
function(x) do.call(rgb, as.list(c(x, maxColorValue = 255)))) -> HEX
# bind
dat.col.KAG <- cbind(dat.col.KAG, "HEX" = HEX)
# display
dat.col.KAG
# source functions
source("C:/Users/blasc/OneDrive/Documents/GitHub/KID/Code/Functions/SRRI_ext.R")
source("C:/Users/blasc/OneDrive/Documents/GitHub/KID/Code/Functions/SRRI_ext_test.R")
# set wd to file that contains
setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs")
# safe dirs
dirs <- list.dirs()[-c(1, 4)] # remove hardcode later
# colors
col <- dat.col.KAG[order(dat.col.KAG[, "KAG"]), c("KAG", "HEX")]
col[5, 1] <- "Kepler Fonds"
# test Erste
Map(function(x, y){
# set
{setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs")
setwd(x)
# ,pdfs
file_nom <- list.files(pattern = ".pdf")}
# FUN over all .pdfs
lapply(file_nom, function(z){
SRRI_ext_test(doc = z, col = y)
})
}, dirs[3], col[3, 2]) -> erste.test
# extracted SRRI
cbind(dat.valid.SRRI[dat.valid.SRRI[, "KAG"] == "Erste", ],
"Extracted" = sapply(erste.test[[1]], "[[", 2)) -> res
par(mfrow = c(3, 4))
# plot
invis.Map(function(x, y, z, l, k){
{plot(x[, 1], x[, 2], col = x[, ncol(x)], pch = 19, main = paste("Predicted:", z, "| Actual:", l))
abline(v = y, col = "red", lwd = 2)
lapply(k, function(x) abline(v = x, col = "grey", lwd = 2, lty = 2))}
}, lapply(erste.test[[1]], "[[", 3), sapply(erste.test[[1]], "[[", 4), res[, 4], res[, 3],
lapply(erste.test[[1]], "[[", 5))
# store Errors
utils::capture.output(
# Map over dirs
Map(function(x, y){
# set
{setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs")
setwd(x)
# ,pdfs
file_nom <- list.files(pattern = ".pdf")}
# lapply over all .pdfs
lapply(file_nom, function(z){
# extract and error handle
try(SRRI_ext_test(doc = z, col = y), silent = F)
})
}, dirs, col[, 2]) -> test
, type = "message")
# store Errors
utils::capture.output(
# Map over dirs
Map(function(x, y){
# set
{setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs")
setwd(x)
# ,pdfs
file_nom <- list.files(pattern = ".pdf")}
# lapply over all .pdfs
lapply(file_nom, function(z){
# extract and error handle
try(SRRI_ext_test(doc = z, col = y), silent = F)
})
}, dirs, col[, 2]) -> test
, type = "message")
## HEX bitnap to RGB
z <- array(1:24, dim = 2:4)
View(z)
z[1]
z[1,1,1]
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
# cache = TRUE ,
fig.width = 4,
fig.height = 3,
fig.align = "center")
# Packages
get.package <- function(package){
lapply(package, \(x){
# check if packages are installed and if not install them
if(!require(x, character.only = T)){
install.packages(x)
}
# call package
library(x, character.only = T)
})
}
# exec
get.package(c("png", "jpeg", "tabulizer", "pdftools", "raster", "rgdal", "sp",
"cluster"))
# since I will use Map() / lapply() alot for plotting I will wrap them in invisible()
invis.Map <- function(f, ...) invisible(Map(f, ...))
invis.lapply <- function(x, f, ...) invisible(lapply(x, f, ...))
# set
setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs")
# files
file_names <- list.files(pattern = ".pdf", recursive = T)
# create df
dat.valid.SRRI <- as.data.frame(cbind("KID" = file_names,
"SRRI" = sapply(strsplit(sapply(strsplit(file_names, "_", fixed = T),
function(x) x[length(x)]), ".", fixed = T), "[", 1)))
# split first col
dat.valid.SRRI[, "KAG"] <- sapply(strsplit(dat.valid.SRRI[, 1], "/"), "[", 1)
dat.valid.SRRI[, "KID"] <- sapply(strsplit(dat.valid.SRRI[, 1], "/"), "[", 2)
# order
dat.valid.SRRI <- dat.valid.SRRI[, c(3, 1, 2)]
# glimpse
head(dat.valid.SRRI, 7)
# dim
dim(dat.valid.SRRI)
# Hist
hist(as.numeric(dat.valid.SRRI[, "SRRI"]), breaks = 10, main = "SRRI", col = 4, xlab = "")
# set
setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs/Auxiliary")
# import
dat.col.KAG <- read.table(list.files(pattern = "RGB"),
col.names = c("KAG", "R", "G", "B"))
# add hex
sapply(as.data.frame(t(dat.col.KAG[, -1])),
function(x) do.call(rgb, as.list(c(x, maxColorValue = 255)))) -> HEX
# bind
dat.col.KAG <- cbind(dat.col.KAG, "HEX" = HEX)
# display
dat.col.KAG
# source functions
source("C:/Users/blasc/OneDrive/Documents/GitHub/KID/Code/Functions/SRRI_ext.R")
source("C:/Users/blasc/OneDrive/Documents/GitHub/KID/Code/Functions/SRRI_ext_test.R")
setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs")
# safe dirs
dirs <- list.dirs()[-c(1, 4)] # remove hardcode later
# colors
col <- dat.col.KAG[order(dat.col.KAG[, "KAG"]), c("KAG", "HEX")]
col[5, 1] <- "Kepler Fonds"
# test Erste
Map(function(x, y){
# set
{setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs")
setwd(x)
# ,pdfs
file_nom <- list.files(pattern = ".pdf")}
# FUN over all .pdfs
lapply(file_nom, function(z){
SRRI_ext_test(doc = z, col = y)
})
}, dirs[3], col[3, 2]) -> erste.test
cbind(dat.valid.SRRI[dat.valid.SRRI[, "KAG"] == "Erste", ],
"Extracted" = sapply(erste.test[[1]], "[[", 2)) -> res
par(mfrow = c(3, 4))
# plot
invis.Map(function(x, y, z, l, k){
{plot(x[, 1], x[, 2], col = x[, ncol(x)], pch = 19, main = paste("Predicted:", z, "| Actual:", l))
abline(v = y, col = "red", lwd = 2)
lapply(k, function(x) abline(v = x, col = "grey", lwd = 2, lty = 2))}
}, lapply(erste.test[[1]], "[[", 3), sapply(erste.test[[1]], "[[", 4), res[, 4], res[, 3],
lapply(erste.test[[1]], "[[", 5))
View(erste.test)
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
# cache = TRUE ,
fig.width = 4,
fig.height = 3,
fig.align = "center")
# Packages
get.package <- function(package){
lapply(package, \(x){
# check if packages are installed and if not install them
if(!require(x, character.only = T)){
install.packages(x)
}
# call package
library(x, character.only = T)
})
}
# exec
get.package(c("png", "jpeg", "tabulizer", "pdftools", "raster", "rgdal", "sp",
"cluster"))
# since I will use Map() / lapply() alot for plotting I will wrap them in invisible()
invis.Map <- function(f, ...) invisible(Map(f, ...))
invis.lapply <- function(x, f, ...) invisible(lapply(x, f, ...))
# set
setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs")
# files
file_names <- list.files(pattern = ".pdf", recursive = T)
# create df
dat.valid.SRRI <- as.data.frame(cbind("KID" = file_names,
"SRRI" = sapply(strsplit(sapply(strsplit(file_names, "_", fixed = T),
function(x) x[length(x)]), ".", fixed = T), "[", 1)))
# split first col
dat.valid.SRRI[, "KAG"] <- sapply(strsplit(dat.valid.SRRI[, 1], "/"), "[", 1)
dat.valid.SRRI[, "KID"] <- sapply(strsplit(dat.valid.SRRI[, 1], "/"), "[", 2)
# order
dat.valid.SRRI <- dat.valid.SRRI[, c(3, 1, 2)]
# glimpse
head(dat.valid.SRRI, 7)
# dim
dim(dat.valid.SRRI)
# Hist
hist(as.numeric(dat.valid.SRRI[, "SRRI"]), breaks = 10, main = "SRRI", col = 4, xlab = "")
# set
setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs/Auxiliary")
# import
dat.col.KAG <- read.table(list.files(pattern = "RGB"),
col.names = c("KAG", "R", "G", "B"))
# add hex
sapply(as.data.frame(t(dat.col.KAG[, -1])),
function(x) do.call(rgb, as.list(c(x, maxColorValue = 255)))) -> HEX
# bind
dat.col.KAG <- cbind(dat.col.KAG, "HEX" = HEX)
# display
dat.col.KAG
# source functions
source("C:/Users/blasc/OneDrive/Documents/GitHub/KID/Code/Functions/SRRI_ext.R")
source("C:/Users/blasc/OneDrive/Documents/GitHub/KID/Code/Functions/SRRI_ext_test.R")
# set wd to file that contains
setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs")
# safe dirs
dirs <- list.dirs()[-c(1, 4)] # remove hardcode later
# colors
col <- dat.col.KAG[order(dat.col.KAG[, "KAG"]), c("KAG", "HEX")]
col[5, 1] <- "Kepler Fonds"
# test Erste
Map(function(x, y){
# set
{setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs")
setwd(x)
# ,pdfs
file_nom <- list.files(pattern = ".pdf")}
# FUN over all .pdfs
lapply(file_nom, function(z){
SRRI_ext_test(doc = z, col = y)
})
}, dirs[3], col[3, 2]) -> erste.test
## HEX bitnap to RGB
erste.test[[1]][[1]][[3]]
?pdftools::pdf_render_page
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
# cache = TRUE ,
fig.width = 4,
fig.height = 3,
fig.align = "center")
# Packages
get.package <- function(package){
lapply(package, \(x){
# check if packages are installed and if not install them
if(!require(x, character.only = T)){
install.packages(x)
}
# call package
library(x, character.only = T)
})
}
# exec
get.package(c("png", "jpeg", "tabulizer", "pdftools", "raster", "rgdal", "sp",
"cluster"))
# since I will use Map() / lapply() alot for plotting I will wrap them in invisible()
invis.Map <- function(f, ...) invisible(Map(f, ...))
invis.lapply <- function(x, f, ...) invisible(lapply(x, f, ...))
# set
setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs")
# files
file_names <- list.files(pattern = ".pdf", recursive = T)
# create df
dat.valid.SRRI <- as.data.frame(cbind("KID" = file_names,
"SRRI" = sapply(strsplit(sapply(strsplit(file_names, "_", fixed = T),
function(x) x[length(x)]), ".", fixed = T), "[", 1)))
# split first col
dat.valid.SRRI[, "KAG"] <- sapply(strsplit(dat.valid.SRRI[, 1], "/"), "[", 1)
dat.valid.SRRI[, "KID"] <- sapply(strsplit(dat.valid.SRRI[, 1], "/"), "[", 2)
# order
dat.valid.SRRI <- dat.valid.SRRI[, c(3, 1, 2)]
# glimpse
head(dat.valid.SRRI, 7)
# dim
dim(dat.valid.SRRI)
# Hist
hist(as.numeric(dat.valid.SRRI[, "SRRI"]), breaks = 10, main = "SRRI", col = 4, xlab = "")
# set
setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs/Auxiliary")
# import
dat.col.KAG <- read.table(list.files(pattern = "RGB"),
col.names = c("KAG", "R", "G", "B"))
# add hex
sapply(as.data.frame(t(dat.col.KAG[, -1])),
function(x) do.call(rgb, as.list(c(x, maxColorValue = 255)))) -> HEX
# bind
dat.col.KAG <- cbind(dat.col.KAG, "HEX" = HEX)
# display
dat.col.KAG
# source functions
source("C:/Users/blasc/OneDrive/Documents/GitHub/KID/Code/Functions/SRRI_ext.R")
source("C:/Users/blasc/OneDrive/Documents/GitHub/KID/Code/Functions/SRRI_ext_test.R")
# set wd to file that contains
setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs")
# safe dirs
dirs <- list.dirs()[-c(1, 4)] # remove hardcode later
# colors
col <- dat.col.KAG[order(dat.col.KAG[, "KAG"]), c("KAG", "HEX")]
col[5, 1] <- "Kepler Fonds"
# test Erste
Map(function(x, y){
# set
{setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs")
setwd(x)
# ,pdfs
file_nom <- list.files(pattern = ".pdf")}
# FUN over all .pdfs
lapply(file_nom, function(z){
SRRI_ext_test(doc = z, col = y)
})
}, dirs[3], col[3, 2]) -> erste.test
setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs7Erste")
setwd("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs/Erste")
tte <- pdftools::pdf_render_page("C:/Users/blasc/OneDrive/Documents/GitHub/KID/KIDs/Erste/kid-eb-274-t2834-at_de-de_en_6.pdf", 1, dpi = 50, numeric = TRUE)
tte[1,1,1,1]
tte[1,1,1,]
tte[1,1,1]
mean(tte)
tte*255
tte[1,1]
tte[1,1, ]
tte[,,4]
table(tte[,,4])
dim(tte[,,1:3])
